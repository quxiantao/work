git分支合并有两种方式

合并分支有两种方式：rebase和merge。
现在HEAD指向master分支 当前分支未master
rebase 称作衍合。衍合有两个步骤：1.找到了公共祖先之后，会把develop的commit 依次加入到改祖先之后。2.将master分支的commit依次加入到第一步执行完之后的commit上。

merge  成为融合。找到公共祖先的commit,然后比较两个分支顶点的commit，进行差异化的比较，生成一个新的commit加入到master分支上 ,这个commit比较特殊会指向两个父节点：


git文件状态
文件状态：ignore(忽略状态)、untrack(未跟踪)、track(跟踪)三种状态。重点分析跟踪下的三种管理状态：未修改，修改，暂存。

git 结构
工作区 缓冲区 本地库 远程库
working space
stage（index）
repository local
repository remote


git对象

blob 就是位于object目录中的内容 40位的hash-key 前两位未目录 后38未文件名
使用git add file_1.txt之后，object里会多一个对象，
git cat-file -p hash-key 对象内容 
git cat-file -t hash-key 对象类型

tree
get hash-object 目录或文件获取对象的key值
tree对象是在commit的过程中生成的,其生成会根据.git目录下的index文件的内容来创建。
git add的操作就是将文件的信息保存到index文件中，在commit时，根据index的内容来生成tree对象。

commit
只有在commit的时候，才会根据index记录的内容生成tree对象，
commit对象里只有两个类容:1.代表工作目录的tree对象的key，上一个commit的key。


git工具使用命令

0 打开git控制窗口
文件夹/工作空间内右键选择git bash here

1 初始化git库
git init
将创建.git 隐藏文件目录，代表git库创建成功

2 关联远程库
git remote add [自命名远程库名 exp origin] [远程库地址:git地址，https地址]

3 拉取远程库内容
git pull -rebase 远程库名 分支名

4 克隆远程库
克隆远程库的功能相当于1+2+3的结果
git clone 远程库地址 [文件夹名:如果不配置默认采用远程库的名称]
默认克隆到本地的分支是master分支
如果要同步develop分支【自定义】 可以用以下命令 
git checkout -b develop origin/develop

5 添加修改到缓冲区（stage）
git add filename 添加修改的文件到stage
git add .
git add -A 添加全部的修改文件到stage
注意：stage就是index文件

6 添加stage的变化到版本库
git commit -m'提交注释的内容'
注意：如果没有-m参数可能会打开编辑器进行输入

7 同步版本库的内容到远程仓库
git push -u 远程库名  远程分支名
git push -u 远程库名  [本地分支名:]远程分支名
注意：-u参数首次进行关联 
简化 git push

8 分支管理命令
git branch 查看分支信息
git branch -r 查看远程分支
git branch 分支名 创建分支
git branch -d 分支名 删除分支【注意参数D为强行删除分支】
git checkout 分支名 切换分支
git checkout -b 分支名 创建分支并切换分支
建立本地分支和远程分支的关联
git branch --set-upstream branch-name origin/branch-name

多人合作流程 1 试图push 2 失败就试图pull 3 解决冲突 4 再push


复制一个特定的提交到当前分支
git cherry-pick commit-id 将其他分支的提交复制到当前分支并生成一个不同的提交



9 远程分支命令
git remote -v 查看远程信息
git remote add orgin 远程库地址
git remote rm origin

====================================
10 工作现场处理
git stash 	隐藏工作现场
git stash list  查看工作现场
git stash appy  回复工作现场 例如：git stash apply stash@{0}
git stash drop	删除stash
git stash pop   恢复工作现场同时删除


11 标签管理tag
git tag		显示标签
git tag 标签名	创建标签
git tag -d 标签 删除标签
git show 标签   显示标签的详细内容

git tag -a <tagname> -m "注释内容"

12 版本信息的取回
git reset --hard HEAD^^ 版本回退到上已版本
git reset --hard commit-id （版本前7位或者全部）

git checkout -- filename 把工作区中相应文件的修改全部撤销 注意修改未添加到暂存区
git reset HEAD file      把添加到stage中的修改退回到工作区

HEAD 指向当前分支 当前分支指向提交commit



13 查看工作区和版本库中最新版本的区别
git diff head -- filename


14 查看stage中的内容
git ls-files --stage
显示 文件类型 as-key 目录结构或文件名




====================================

20. 显示版本历史
git log  	显示历史版本	
git log --graph 图形显示历史版本
git log --pretty=oneline
命令的退出
command：键盘上的q

21. 显示全部版本历史
git reflog

21. 合并分支【合并指定分支到当前分支】
git merge 合并命令
git merge --no-ff -m"注释内容" develop
没有-m 参数会打开编辑器要求输入内容

按insert键切换 编辑状态 插入/替换
按esc进入命令状态
输入":wq"退回到命令行

=====================================
linux命令
mkdir 创建文件夹
touch 创建文件
clear 清屏

分支 == 时间线

cat 文件名 查看文件内容